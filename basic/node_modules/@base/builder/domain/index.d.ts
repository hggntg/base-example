
/// <reference types="node" />
import { IApp, IConfig as IBaseConfig, IAppProperty, IAppEvent } from "../interface";
import { EventEmitter } from "events";
export declare const CONFIG: unique symbol;
export declare const APP: unique symbol;
export declare const CONFIG_SERVICE = "IBaseConfig";
export declare const APP_SERVICE = "IApp";
export declare class App implements IApp {
    getType(): IClassType;
    private logger;
    private event;
    private preStartAppTasks;
    context: INamespaceStatic;
    type: "Worker" | "API";
    config: IBaseConfig;
    init(input: Partial<IAppProperty>): void;
    constructor();
    loadConfig(path: string): void;
    serveAs(_type: "Worker" | "API"): void;
    use(plugin: Promise<any>, preStartApp: boolean): IApp;
    report(event: IAppEvent): void;
    once(event: "preStartApp" | "startAppDone" | "appError", cb: any): EventEmitter;
    start(): void;
    static getType(): IClassType;
}
