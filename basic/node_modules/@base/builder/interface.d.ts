
export interface IConfig {
    setConfig(config: any): any;
    getSection<T>(classImp: {
        new (): T;
    }, sectionName: string): T;
}
export interface IAppProperty {
    aliases: {
        [key: string]: string;
    };
    root: string;
    appName: string;
}
export interface IAppEvent {
    event: string;
    description: string;
    level: "green" | "red";
    meta: any;
    needToRestart: boolean;
}
export interface IApp extends IBaseClass<IAppProperty> {
    config: IConfig;
    context: INamespaceStatic;
    type: "Worker" | "API";
    loadConfig(path: string): any;
    serveAs(type: "Worker" | "API"): any;
    use(plugin: Promise<boolean>, preStartApp: boolean): IApp;
    report(event: IAppEvent): any;
    once(event: "preStartApp" | "startAppDone", cb: any): any;
    start(): any;
}
